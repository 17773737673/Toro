/*
 * Copyright 2016 eneim@Eneim Labs, nam@ene.im
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package im.ene.lab.toro.sample.presentation.youtube;

import android.support.annotation.NonNull;
import android.support.annotation.Nullable;
import android.view.View;
import android.widget.TextView;
import butterknife.Bind;
import butterknife.ButterKnife;
import com.google.android.youtube.player.YouTubeThumbnailView;
import im.ene.lab.toro.ext.YouTubeVideosAdapter;
import im.ene.lab.toro.ext.YouTubeItemViewHolder;
import im.ene.lab.toro.sample.R;

/**
 * Created by eneim on 7/6/16.
 */
public class MyYouTubeItemViewHolder extends YouTubeItemViewHolder {

  static final int LAYOUT_RES = R.layout.youtube_video_view_holder;

  @Bind(R.id.playlist_title) TextView title;
  @Bind(R.id.playlist_json) TextView description;
  @Bind(R.id.youtube_fragment) View youtubeContainer;

  YouTubeVideoItem youTubeVideoItem;

  public MyYouTubeItemViewHolder(View itemView, YouTubeVideosAdapter parent) {
    super(itemView, parent);
    ButterKnife.bind(this, itemView);
    // Dynamically change this View's id to prevent conflict between ViewHolder's fragments
    if (youtubeContainer != null) {
      youtubeContainer.setId(fragmentId); // this ID is generated by super class
    }
  }

  @Override public void bind(@Nullable Object object) {
    this.youTubeVideoItem = (YouTubeVideoItem) object;

    if (youTubeVideoItem != null) {
      title.setText(youTubeVideoItem.title);
      description.setText(youTubeVideoItem.description);
    }
  }

  @Nullable @Override protected YouTubeThumbnailView getThumbnailView() {
    return (YouTubeThumbnailView) itemView.findViewById(R.id.thumbnail);
  }

  @Override protected String getYoutubeVideoId() {
    return this.youTubeVideoItem != null ? this.youTubeVideoItem.id : null;
  }

  @Nullable @Override public String getVideoId() {
    return youTubeVideoItem == null ? null : youTubeVideoItem.id + "@" + getAdapterPosition();
  }

  @NonNull @Override public View getVideoView() {
    View view = playerFragment == null ? youtubeContainer : playerFragment.getView();
    return view != null ? view : youtubeContainer;
  }
}
