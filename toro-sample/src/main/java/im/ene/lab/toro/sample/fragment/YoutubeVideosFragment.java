/*
 * Copyright 2016 eneim@Eneim Labs, nam@ene.im
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package im.ene.lab.toro.sample.fragment;

import android.annotation.TargetApi;
import android.os.Build;
import android.support.annotation.NonNull;
import android.support.annotation.Nullable;
import android.support.v4.app.FragmentManager;
import android.support.v7.widget.LinearLayoutManager;
import android.support.v7.widget.RecyclerView;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.TextView;
import butterknife.Bind;
import butterknife.ButterKnife;
import com.google.android.youtube.player.YouTubeThumbnailView;
import im.ene.lab.toro.ext.youtube.YoutubeVideosAdapter;
import im.ene.lab.toro.ext.youtube.YoutubeViewHolder;
import im.ene.lab.toro.media.Cineer;
import im.ene.lab.toro.media.PlaybackException;
import im.ene.lab.toro.sample.R;
import im.ene.lab.toro.sample.base.RecyclerViewFragment;
import im.ene.lab.toro.sample.data.SimpleVideoObject;
import im.ene.lab.toro.sample.data.VideoSource;

/**
 * Created by eneim on 4/8/16.
 */
public class YoutubeVideosFragment extends RecyclerViewFragment {

  public static final String TAG = "YoutubeListFragment";

  public static YoutubeVideosFragment newInstance() {
    return new YoutubeVideosFragment();
  }

  @NonNull @Override protected RecyclerView.LayoutManager getLayoutManager() {
    return new LinearLayoutManager(getContext(), LinearLayoutManager.VERTICAL, false);
  }

  @NonNull @Override protected RecyclerView.Adapter getAdapter() {
    return new MyYoutubeVideosAdapter(getChildFragmentManager());
  }

  private static class MyYoutubeVideosAdapter extends YoutubeVideosAdapter {

    public MyYoutubeVideosAdapter(FragmentManager fragmentManager) {
      super(fragmentManager);
    }

    @Nullable @Override protected Object getItem(int position) {
      return new SimpleVideoObject(VideoSource.YOUTUBES[position % VideoSource.YOUTUBES.length]);
    }

    @Override public YoutubeViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {
      View view = LayoutInflater.from(parent.getContext())
          .inflate(MyYoutubeViewHolder.LAYOUT_RES, parent, false);
      return new MyYoutubeViewHolder(this, view);
    }

    @Override public int getItemCount() {
      return VideoSource.YOUTUBES.length * 10;
    }
  }

  static class MyYoutubeViewHolder extends YoutubeViewHolder {

    private static final int LAYOUT_RES = R.layout.vh_youtube_video;

    @Bind(R.id.video_id) TextView mVideoId;
    @Bind(R.id.info) TextView mInfo;
    @Bind(R.id.youtube_fragment) View mYtFragmentContainer;

    private SimpleVideoObject mItem;

    @TargetApi(Build.VERSION_CODES.JELLY_BEAN_MR1)
    public MyYoutubeViewHolder(MyYoutubeVideosAdapter adapter, View itemView) {
      super(itemView, adapter);
      TAG = toString();
      ButterKnife.bind(this, itemView);
      // Dynamically change this View's id to prevent conflict between ViewHolder's fragments
      if (mYtFragmentContainer != null) {
        mYtFragmentContainer.setId(mFragmentId); // this ID is generated by super class
      }
    }

    @Nullable @Override public String getVideoId() {
      return mItem.video + " - " + getAdapterPosition();  // holds uniqueness in Adapter
    }

    @NonNull @Override public View getVideoView() {
      View view = mPlayerFragment == null ? mYtFragmentContainer : mPlayerFragment.getView();
      return view != null ? view : mYtFragmentContainer;
    }

    @Override public void onPlaybackStarted() {
      super.onPlaybackStarted();
      mInfo.setText("Started");
    }

    @Override public String getYoutubeVideoId() {
      return mItem != null ? mItem.video : null;
    }

    @Override public void bind(@Nullable Object object) {
      if (object == null || !(object instanceof SimpleVideoObject)) {
        throw new IllegalArgumentException("Illegal");
      }

      mItem = (SimpleVideoObject) object;
      mVideoId.setText(mItem.video + " | Loop: " + isLoopAble());
    }

    @Nullable @Override protected YouTubeThumbnailView getThumbnailView() {
      return /* (YouTubeThumbnailView) itemView.findViewById(R.id.thumbnail) */ null;
    }

    @Override public void onViewHolderBound() {
      super.onViewHolderBound();
      mInfo.setText("Bound");
    }

    private final String TAG;

    @Override public void onLoading() {
      super.onLoading();
      Log.d(TAG, "onLoading() called with: " + "");
      mInfo.setText("Loading");
    }

    @Override public void onLoaded(String s) {
      super.onLoaded(s);
      if (mThumbnail != null) {
        mThumbnail.setVisibility(View.INVISIBLE);
      }
      mInfo.setText("Loaded");
    }

    @Override public void onPlaybackPaused() {
      super.onPlaybackPaused();
      if (mThumbnail != null) {
        mThumbnail.setVisibility(View.VISIBLE);
      }
      mInfo.setText("Paused");
    }

    @Override public void onPlaybackCompleted() {
      super.onPlaybackCompleted();
      if (mThumbnail != null) {
        mThumbnail.setVisibility(View.VISIBLE);
      }
      mInfo.setText("Stopped");
    }

    @Override public boolean onPlaybackError(Cineer mp, PlaybackException error) {
      if (mThumbnail != null) {
        mThumbnail.setVisibility(View.VISIBLE);
      }
      mInfo.setText("Error:" + error.getLocalizedMessage());
      return super.onPlaybackError(mp, error);
    }

    @Override public String toString() {
      return Integer.toHexString(hashCode()) + " position=" + getAdapterPosition();
    }

  }
}
